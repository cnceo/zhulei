<?php/** * 系统TAGmodel */class supp_dis_relation_model extends base_model{    /* 获取没有审核的经销商数 */    function getNotAuthenCount($where= array(), $store_id)    {        $sql = "SELECT count(s.store_id) as storeId FROM " . option('system.DB_PREFIX') . "certification  cer, " . option('system.DB_PREFIX') . "store s WHERE s.STATUS !=4 AND cer.store_id = s.store_id and cer.supplier_id = {$store_id} cer.store_id not in (select distributor_id from ".option('system.DB_PREFIX')."supp_dis_relation as supp where supp.supplier_id = {$store_id} and supp.distributor_id = cer.store_id)";        if (!empty($where)) {            foreach ($where as $key => $value) {                if (is_array($value)) {                    if (array_key_exists('like', $value)) {                        $sql .= " AND " . $key . " like '" . $value['like'] . "'";                    } else if (array_key_exists('in', $value)) {                        $sql .= " AND " . $key . " in (" . $value['in'] . ")";                    }                } else {                    $sql .= " AND " . $key . "=" . $value;                }            }        }        $sellers = $this->db->query($sql);        return !empty($sellers[0]['storeId']) ? $sellers[0]['storeId'] : 0;    }    /* 获取没有审核的经销商列表 */    function getNotAuthen($where = array(), $store_id, $offset = 0, $limit = 0)    {        $sql = "SELECT * FROM " . option('system.DB_PREFIX') . "certification  cer, " . option('system.DB_PREFIX') . "store s WHERE s.STATUS !=4 AND cer.store_id = s.store_id and cer.supplier_id = {$store_id} and cer.store_id not in (select distributor_id from ".option('system.DB_PREFIX')."supp_dis_relation as supp where supp.supplier_id = {$store_id} and supp.distributor_id = cer.store_id)";        if (!empty($where)) {            foreach ($where as $key => $value) {                if (is_array($value)) {                    if (array_key_exists('like', $value)) {                        $sql .= " AND " . $key . " like '" . $value['like'] . "'";                    } else if (array_key_exists('in', $value)) {                        $sql .= " AND " . $key . " in (" . $value['in'] . ")";                    }                } else {                    $sql .= " AND " . $key . "=" . $value;                }            }        }        $sql .= ' order by s.store_id DESC';        if ($limit) {            $sql .= ' LIMIT ' . $offset . ',' . $limit;        }        $notauthen = $this->db->query($sql);        return $notauthen;    }    /* 获取已审核的经销商数 */    function getAuthenCount($where= array(), $store_id)    {        $sql = "SELECT count(s.store_id) as storeId FROM " . option('system.DB_PREFIX') . "supp_dis_relation  supp, " . option('system.DB_PREFIX') . "store s WHERE s.STATUS !=4 AND supp.distributor_id = s.store_id and supp.supplier_id = {$store_id}";        if (!empty($where)) {            foreach ($where as $key => $value) {                if (is_array($value)) {                    if (array_key_exists('like', $value)) {                        $sql .= " AND " . $key . " like '" . $value['like'] . "'";                    } else if (array_key_exists('in', $value)) {                        $sql .= " AND " . $key . " in (" . $value['in'] . ")";                    }                } else {                    $sql .= " AND " . $key . "=" . $value;                }            }        }        $sellers = $this->db->query($sql);        return !empty($sellers[0]['storeId']) ? $sellers[0]['storeId'] : 0;    }    /* 获取已审核的经销商列表 */    function getAuthen($where = array(), $store_id, $offset = 0, $limit = 0)    {        $sql = "SELECT * FROM " . option('system.DB_PREFIX') . "supp_dis_relation  supp, " . option('system.DB_PREFIX') . "store s WHERE s.STATUS !=4 AND supp.distributor_id = s.store_id and supp.supplier_id = {$store_id}";        if (!empty($where)) {            foreach ($where as $key => $value) {                if (is_array($value)) {                    if (array_key_exists('like', $value)) {                        $sql .= " AND " . $key . " like '" . $value['like'] . "'";                    } else if (array_key_exists('in', $value)) {                        $sql .= " AND " . $key . " in (" . $value['in'] . ")";                    }                } else {                    $sql .= " AND " . $key . "=" . $value;                }            }        }        $sql .= ' order by s.store_id DESC';        if ($limit) {            $sql .= ' LIMIT ' . $offset . ',' . $limit;        }        $notauthen = $this->db->query($sql);        return $notauthen;    }    /* 获取所有经销商列表 */    function getAllAagency($where = array(), $store_id, $offset = 0, $limit = 0)    {        //$sql = "SELECT * FROM " . option('system.DB_PREFIX') . "store as s, " . option('system.DB_PREFIX') . "supp_dis_relation as supp WHERE s.store_id != supp.distributor_id  and supp.supplier_id != {$store_id} AND drp_level = 0";        $sql = "SELECT * FROM ". option('system.DB_PREFIX') . "store WHERE drp_level = 0 AND status != 4 ";        if (!empty($where)) {            foreach ($where as $key => $value) {                if (is_array($value)) {                    if (array_key_exists('like', $value)) {                        $sql .= " AND " . $key . " like '" . $value['like'] . "'";                    } else if (array_key_exists('in', $value)) {                        $sql .= " AND " . $key . " in (" . $value['in'] . ")";                    } else if(array_key_exists('!=',$value)){                        $sql .= " AND " . $key . " != ". $value['!='] ."";                    }                } else {echo '2';                    $sql .= " AND " . $key . "=" . $value;                }            }        }        $sql .= ' order by store_id DESC';        if ($limit) {            $sql .= ' LIMIT ' . $offset . ',' . $limit;        }//echo $sql;        $allAgency = $this->db->query($sql);        return $allAgency;    }    /* 获取所有经销商数 */    function getAllAgencyCount($where = array())    {        $sql = "SELECT count(store_id) as storeId FROM ". option('system.DB_PREFIX') . "store WHERE drp_level = 0 AND status != 4";        if (!empty($where)) {            foreach ($where as $key => $value) {                if (is_array($value)) {                    if (array_key_exists('like', $value)) {                        $sql .= " AND " . $key . " like '" . $value['like'] . "'";                    } else if (array_key_exists('in', $value)) {                        $sql .= " AND " . $key . " in (" . $value['in'] . ")";                    }                } else {                    $sql .= " AND " . $key . "=" . $value;                }            }        }        $allAgency = $this->db->query($sql);        return !empty($allAgency[0]['storeId']) ? $allAgency[0]['storeId'] : 0;    }    /**     * 获取经销商的批发收入     * @param $seller_id     * @param $supplier_id     */    public function getIncome($seller_id, $supplier_id = null)    {        $where = array();        $where['distributor_id'] = $seller_id;        if (!is_null($supplier_id)) {            $where['supplier_id'] = $supplier_id;        }        $income = $this->db->where($where)->sum('income');        return !empty($income) ? $income : 0;    }    /**     * 获取经销商保证余额     * @param $seller_id     * @param null $supplier_id     */    public function getBondBalance($seller_id, $supplier_id = null)    {        $where = array();        $where['distributor_id'] = $seller_id;        if (!is_null($supplier_id)) {            $where['supplier_id'] = $supplier_id;        }        $bond_balance = $this->db->where($where)->sum('bond');        return !empty($bond_balance) ? $bond_balance : 0;    }    /**     * 获取经销商已提现金额     * @param $supplier_id     * @param null $seller_id     */    public function getWithdrawal($supplier_id = null, $seller_id = null)    {        $where = array();        if (!is_null($supplier_id)) {            $where['supplier_id'] = $supplier_id;        }        if (!is_null($seller_id)) {            $where['distributor_id'] = $seller_id;        }        $withdrawal = $this->db->where($where)->sum('withdrawal');        return !empty($withdrawal) ? $withdrawal : 0;    }    /**     *获取经销商可提现余额     * @param null $seller_id     * @param null $supplier_id     * @return int     */    public function getBalance($seller_id = null, $supplier_id = null)    {        $where = array();        if (!is_null($seller_id)) {            $where['distributor_id'] = $seller_id;        }        if (!is_null($supplier_id)) {            $where['supplier_id'] = $supplier_id;        }        $balance = $this->db->where($where)->sum('balance');        return !empty($balance) ? $balance : 0;    }    /**     * 获取经销商不可用余额     * @param $seller_id     * @param null $supplier_id     * @return int     */    public function getUnbalance($seller_id = null, $supplier_id = null)    {        $where = array();        if (!is_null($seller_id)) {            $where['distributor_id'] = $seller_id;        }        if (!is_null($supplier_id)) {            $where['supplier_id'] = $supplier_id;        }        $unbalance = $this->db->where($where)->sum('unbalance');        return !empty($unbalance) ? $unbalance : 0;    }    /**     * 更新数据     * @param $where     * @param $data     * @return mixed     */    public function setData($where, $data)    {        return $this->db->where($where)->data($data)->save();    }    /**     * 订单未支付金额     * @param null $seller_id     * @param null $supplier_id     * @return int     */    public function getNotPaid($seller_id = null, $supplier_id = null)    {        $where = array();        if (!is_null($seller_id)) {            $where['distributor_id'] = $seller_id;        }        if (!is_null($supplier_id)) {            $where['supplier_id'] = $supplier_id;        }        $not_paid = $this->db->where($where)->sum('not_paid');        return !empty($not_paid) ? $not_paid : 0;    }    /**     * 订单已支付金额     * @param null $seller_id     * @param null $supplier_id     * @return int     */    public function getPaid($seller_id = null, $supplier_id = null)    {        $where = array();        if (!is_null($seller_id)) {            $where['distributor_id'] = $seller_id;        }        if (!is_null($supplier_id)) {            $where['supplier_id'] = $supplier_id;        }        $paid = $this->db->where($where)->sum('paid');        return !empty($paid) ? $paid : 0;    }    /**     * 退货次供货商金额     * @param null $seller_id     * @param null $supplier_id     */    public function getReturnOwe($seller_id = null, $supplier_id = null)    {        $where = array();        if (!is_null($seller_id)) {            $where['distributor_id'] = $seller_id;        }        if (!is_null($supplier_id)) {            $where['supplier_id'] = $supplier_id;        }        $return_owe = $this->db->where($where)->sum('return_owe');        return !empty($return_owe) ? $return_owe : 0;    }}